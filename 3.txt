3 )
Aim : SQL Queries - all types of Join, Sub-Query and View: Write at least 10 SQL queries for suitable database application using SQL DML statements.
------------------------------------------------------------------------------------------------------------------------------------
mysql> create database Bank;
Query OK, 1 row affected (0.00 sec)
mysql> use Bank;
Database changed
Create the Branch Table :
mysql> CREATE TABLE Branch(Branch_name varchar(20) primary key,Branch_city varchar(20),Assets varchar(20));
Query OK, 0 rows affected (0.05 sec)
mysql> insert into Branch values('Pune','Handewadi','Bonds'),('Hadapsar','Katraj','Real Estate'),('Mumbai','Andheri','mortgages'),('Akrudi','Pimpari','Money');
Query OK, 4 rows affected (0.03 sec)
mysql> SELECT * FROM Branch;
+-------------+-------------+-------------+
| Branch_name | Branch_city | Assets      |
+-------------+-------------+-------------+
| Akrudi      | Pimpari     | Money       |
| Hadapsar    | Katraj      | Real Estate |
| Mumbai      | Andheri     | mortgages   |
| Pune        | Handewadi   | Bonds       |
+-------------+-------------+-------------+
4 rows in set (0.00 sec)
Create the Account Table :
mysql> CREATE TABLE Account ( Acc_no INT PRIMARY KEY, Branch_name VARCHAR(50),Balance INT, FOREIGN KEY (Branch_name) REFERENCES Branch(Branch_name));
Query OK, 0 rows affected (0.03 sec)

mysql> insert into Account values(123,'Pune',11200),(345,'Hadapsar',20000),(890,'Mumbai',25000),(567,'Akrudi',29500);
Query OK, 4 rows affected (0.01 sec)
mysql> SELECT * FROM Account;
+--------+-------------+---------+
| Acc_no | Branch_name | Balance |
+--------+-------------+---------+
|    123 | Pune        |   11200 |
|    345 | Hadapsar    |   20000 |
|    567 | Akrudi      |   29500 |
|    890 | Mumbai      |   25000 |
+--------+-------------+---------+
4 rows in set (0.00 sec)

 Create the Customer Table :
mysql> CREATE TABLE Customer (Cust_name VARCHAR(50) PRIMARY KEY,Cust_street VARCHAR(50), Cust_city VARCHAR(50));
Query OK, 0 rows affected (0.03 sec)
mysql> insert into Customer values('Umesh','FC Road','Pune'),('Anu','Route 66','Katraj'),('Swapnil','Hill Road','Andheri'),('Ritesh','Silverstone Road','Handewadi');
Query OK, 4 rows affected (0.01 sec)
mysql> SELECT * FROM Customer;
+-----------+------------------+-----------+
| Cust_name | Cust_street      | Cust_city |
+-----------+------------------+-----------+
| Anu       | Route 66         | Katraj    |
| Ritesh    | Silverstone Road | Handewadi |
| Swapnil   | Hill Road        | Andheri   |
| Umesh     | FC Road          | Pune      |
+-----------+------------------+-----------+
4 rows in set (0.01 sec)
Create the Depositor Table :
mysql> create table Depositor ( Cust_name VARCHAR(50),Acc_no INT,foreign key (Cust_name) references Customer(Cust_name),foreign key (Acc_no) references Account(Acc_no));
Query OK, 0 rows affected (0.04 sec)
mysql> insert into Depositor values('Ritesh',567),('Swapnil',890),('Umesh',123);
Query OK, 3 rows affected (0.01 sec)
mysql> SELECT * FROM Depositor;
+-----------+--------+
| Cust_name | Acc_no |
+-----------+--------+
| Ritesh    |    567 |
| Swapnil   |    890 |
| Umesh     |    123 |
+-----------+--------+
3 rows in set (0.00 sec)

Create the Loan Table.
mysql> CREATE TABLE Loan (Loan_no INT PRIMARY KEY, Branch_name VARCHAR(50), Amount INT ,FOREIGN KEY (Branch_name) REFERENCES Branch(branch_name));
Query OK, 0 rows affected (0.04 sec)

mysql> insert into Loan values(3,'Akrudi',560), (4,'Akrudi',4000), (5,'Akrudi',9000),(8,'Akrudi',1500);
Query OK, 4 rows affected (0.01 sec)

mysql> SELECT * FROM Loan;
+---------+-------------+--------+
| Loan_no | Branch_name | Amount |
+---------+-------------+--------+

|       3 | Akrudi      |    560 |
|       4 | Akrudi      |   4000 |
|       5 | Akrudi      |   9000 |
|       8 | Akrudi      |   1500 |
+---------+-------------+--------+
4 rows in set (0.01 sec)

Create the Borrower Table.
mysql> CREATE TABLE Borrower (Cust_name VARCHAR(50), Loan_no INT, FOREIGN KEY (Cust_name) REFERENCES Customer(Cust_name),FOREIGN KEY (Loan_no) REFERENCES Loan(Loan_no));
Query OK, 0 rows affected (0.04 sec)
mysql> insert into Borrower values('Ritesh',5),('Umesh',8),('Anu',3);
Query OK, 3 rows affected (0.00 sec)
mysql> SELECT * FROM Borrower;
+-----------+---------+
| Cust_name | Loan_no |
+-----------+---------+
| Ritesh    |       5 |
| Umesh     |       8 |
| Anu       |       3 |
+-----------+---------+
3 rows in set (0.00 sec)
1.Find the names of all branches in loan relation :
mysql> SELECT DISTINCT Branch_name FROM Loan;
+-------------+
| Branch_name |
+-------------+
| Akrudi      |
+-------------+
1 row in set (0.01 sec)
2. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000  :
mysql> SELECT Loan_no FROM Loan WHERE Branch_name = 'Akrudi' AND Amount > 1200;
+---------+
| Loan_no |
+---------+
|       4 |
|       5 |
|       8 |
+---------+
3 rows in set (0.01 sec)
3. Find all customers who have a loan from bank. Find their names, loan no and loan :
mysql> SELECT c.Cust_name, l.Loan_no, l.Amount FROM Customer c INNER JOIN Borrower b ON c.Cust_name = b.Cust_name INNER JOIN Loan l ON b.Loan_no = l.Loan_no;
+-----------+---------+--------+
| Cust_name | Loan_no | Amount |
+-----------+---------+--------+
| Ritesh    |       5 |   9000 |
| Umesh     |       8 |   1500 |
| Anu       |       3 |    560 |
+-----------+---------+--------+
3 rows in set (0.00 sec)
4. List all customers in alphabetical order who have loan from Akurdi branch.
mysql> select Cust_name from Borrower b join Loan l on l.Loan_no=b.Loan_no order by Cust_name;
+-----------+
| Cust_name |
+-----------+
| Anu       |
| Ritesh    |
| Umesh     |
+-----------+
3 rows in set (0.01 sec)
5. Find all customers who have an account or loan or both at bank  :
mysql> select distinct c.Cust_name from Customer c left join Depositor d on c.Cust_name = d.Cust_name left join Borrower b on c.Cust_name = b.Cust_name where d.Cust_name is not null or b.Cust_name is not null; 
+-----------+
| Cust_name |
+-----------+
| Anu       |
| Ritesh    |
| Swapnil   |
| Umesh     |
+-----------+
4 rows in set (0.02 sec)
6. Find the average account balance at each branch  :
mysql> select Branch_name ,avg(Balance) from Account group by Branch_name;
+-------------+--------------+
| Branch_name | avg(Balance) |
+-------------+--------------+
| Akrudi      |   29500.0000 |
| Hadapsar    |   20000.0000 |
| Mumbai      |   25000.0000 |
| Pune        |   11200.0000 |
+-------------+--------------+
4 rows in set (0.02 sec)
7. Find no. of depositors at each branch  :
mysql> select count(Cust_name) from Depositor;
+------------------+
| count(Cust_name) |
+------------------+
|                3 |
+------------------+
1 row in set (0.01 sec)
8. Find the branches where average account balance> 12000  :
mysql> select Branch_name,avg(Balance) from account group by Branch_name having avg(Balance)>12000;
ERROR 1146 (42S02): Table 'Bank.account' doesn't exist
mysql> select Branch_name,avg(Balance) from Account group by Branch_name having avg(Balance)>12000;
+-------------+--------------+
| Branch_name | avg(Balance) |
+-------------+--------------+
| Akrudi      |   29500.0000 |
| Hadapsar    |   20000.0000 |
| Mumbai      |   25000.0000 |
+-------------+--------------+
3 rows in set (0.01 sec)
9. Find number of tuples in customer relation  :
mysql> select count(*) from customer;
ERROR 1146 (42S02): Table 'Bank.customer' doesn't exist
mysql> select count(*) from Customer;
+----------+
| count(*) |
+----------+
|        4 |
+----------+
1 row in set (0.02 sec)

10. Calculate total loan amount given by bank  :
mysql> select sum(Amount) from loan;
ERROR 1146 (42S02): Table 'Bank.loan' doesn't exist
mysql> select sum(Amount) from Loan;
+-------------+
| sum(Amount) |
+-------------+
|       15060 |
+-------------+
1 row in set (0.00 sec)
11. Delete all loans with loan amount between 1300 and 1500  :
mysql> ALTER TABLE Borrower DROP FOREIGN KEY Borrower_ibfk_2;
Query OK, 0 rows affected (0.06 sec)
mysql> DELETE FROM Loan WHERE Amount BETWEEN 1300 AND 1500;
Query OK, 1 row affected (0.00 sec)

mysql> select * from Loan;
+---------+-------------+--------+
| Loan_no | Branch_name | Amount |
+---------+-------------+--------+
|       3 | Akrudi      |    560 |
|       4 | Akrudi      |   4000 |
|       5 | Akrudi      |   9000 |
+---------+-------------+--------+
3 rows in set (0.00 sec)
12.Display the account no. Of the customer who has taken loan.
mysql> select Acc_no from Depositor;
+--------+
| Acc_no |
+--------+
|    123 |
|    567 |
|    890 |
+--------+
3 rows in set (0.01 sec)
13. Display the details of depositors and customers.
mysql> SELECT *FROM Depositor d, Customer c WHERE d.cust_name = c.cust_name;
+-----------+--------+-----------+------------------+-----------+
| Cust_name | Acc_no | Cust_name | Cust_street      | Cust_city |
+-----------+--------+-----------+------------------+-----------+
| Ritesh    |    567 | Ritesh    | Silverstone Road | Handewadi |
| Swapnil   |    890 | Swapnil   | Hill Road        | Andheri   |
| Umesh     |    123 | Umesh     | FC Road          | Pune      |
+-----------+--------+-----------+------------------+-----------+
3 rows in set (0.01 sec)
14.Perform select query using NOT IN sub-query
mysql> SELECT * FROM Customer WHERE Cust_name NOT IN (SELECT Cust_name FROM Depositor);
+-----------+-------------+-----------+
| Cust_name | Cust_street | Cust_city |
+-----------+-------------+-----------+
| Anu       | Route 66    | Katraj    |
+-----------+-------------+-----------+
1 row in set (0.01 sec)


